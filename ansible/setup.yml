---
- hosts: prod
  user: "{{ deploy_user }}"
  vars_files:
    - vars/vars.yml
  become: yes

  tasks:

    - name: Set host name
      hostname:
        name: "{{ host_name }}"

    - name: Set time zone
      timezone:
        name: "{{ time_zone }}"

    - name: Ensure the necessary packages are installed
      apt:
        name: "{{ item }}"
        state: latest
      with_items: "{{ packages }}"

    - name: Generate locale
      locale_gen:
        name: en_US.UTF-8
        state: present
    - name: Set locale
      command: "localectl set-locale LANG=en_US.UTF-8"

    - name: Install ntp
      apt:
        name: ntp
        state: latest
    - name: Enable and start the ntp service
      service:
        name: ntp
        state: started
        enabled: yes

    - name: Install unattended upgrades package
      apt:
        name: unattended-upgrades
        state: present

    - name: Copy unattended upgrades configuration files in place
      template:
        src: "templates/{{ item }}"
        dest: "/etc/apt/apt.conf.d/{{ item }}"
        owner: root
        group: root
        mode: 0644
      with_items:
        - 10periodic
        - 50unattended-upgrades

    - name: Configure open ports with ufw
      ufw:
        rule: "{{ item.rule }}"
        port: "{{ item.port }}"
        proto: "{{ item.proto }}"
      with_items:
        - { rule: 'allow', port: "{{ use_ssh_port }}", proto: 'tcp' }
        - { rule: 'allow', port: 80,                   proto: 'tcp' }
        - { rule: 'allow', port: 443,                  proto: 'tcp' }
        - { rule: 'allow', port: 123,                  proto: 'udp' }
    - name: Configure default incoming/outgoing rules with ufw
      ufw:
        direction: "{{ item.direction }}"
        policy: "{{ item.policy }}"
        state: enabled
      with_items:
        - { direction: outgoing, policy: allow }
        - { direction: incoming, policy: deny  }

    - name: Ensure the directory for static files exists
      file:
        path: "/home/{{ deploy_user }}/{{ deploy_dir }}"
        state: directory

    - name: Start and enable the Nginx service
      service:
        name: nginx
        state: started
        enabled: yes

    - name: Configure Nginx
      template:
        src: "templates/nginx.conf"
        dest: "/etc/nginx/nginx.conf"
        owner: root
        group: root
        mode: 0644
      notify: Reload Nginx config

    - name: Add Certbot repo to apt
      apt_repository:
        repo: 'ppa:certbot/certbot'

    - name: Install the Certbot package
      apt:
        name: python-certbot-nginx
        state: present
        update_cache: yes

    # - name: Obtain and install certificate # not sure about this
    #   command: "certbot --nginx -m {{ cert_email }} -d {{ server_name }} certonly"

    - name: Setup a cronjob to renew certificate automatically
      cron:
        name: Renew certificates
        job:  "certbot renew"
        special_time: monthly

  handlers:

    - name: Reload Nginx config
      command: "nginx -s reload"
